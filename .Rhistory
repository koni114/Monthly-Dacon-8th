#min_data_in_bin=100,
#min_gain_to_split = 10,
#min_data_in_leaf = 30,
is_unbalance = F)
#- Setting up Gini Eval Function
lgb.normalizedgini = function(preds, dtrain){
actual = getinfo(dtrain, "label")
score  = MLmetrics::NormalizedGini(preds,actual)
return(list(name = "gini", value = score, higher_better = TRUE))
}
#- Cross Validation
set.seed(2020)
lgb.model.cv = lgb.cv(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = 0.02,                    #- *** 훈련량
num_leaves            = 25,                      #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                       #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,
early_stopping_rounds = 50,                      #- ** 더이상 발전이 없으면 그만두게 설정할때 이를 몇번동안 발전이 없으면 그만두게 할지 여부
eval_freq             = 20,
#eval                  = lgb.normalizedgini,
categorical_feature   = categoricals.vec,
nfold                 = 10,
stratified            = TRUE)
lgb.model.cv
best.iter = lgb.model.cv$best_iter
lgb_model_1 = lgb.train(
params              = lgb.grid,
data                = train.lgb,
learning_rate       = 0.02,                        #- *** 훈련량
num_leaves          = 25,                          #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads         = 2,                           #- * 병렬처리시 처리할 쓰레드
nrounds             = best.iter,                   #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
#-     early_stopping이 있으면 최대한 많이 줘도 (10,000~)별 상관이 없음
eval_freq           = 20,
# eval                = lgb.normalizedgini)
categorical_feature = categoricals.vec)
#- Create and Submit Predictions
YHat_lgbm_1       <- predict(lgb_model_1, test_sparse)
AUC_lgbm <- mkAUCValue(
YHat = YHat_lgbm_1,
Y    = ifelse(testData$voted == 2, 1, 0))
AUC_lgbm
lgb.grid = list(objective = "binary",
metric    = "auc",
boosting  = "gbdt",
min_sum_hessian_in_leaf = 1,
feature_fraction = 0.7,
bagging_fraction = 0.7,
bagging_freq = 5,
# max_depth    = 5,
# num_leaves   = 5,
# min_child_weight = 1,
#min_data = 100,
#max_bin = 50,
lambda_l1 = 8,
lambda_l2 = 1.3,
#min_data_in_bin=100,
#min_gain_to_split = 10,
#min_data_in_leaf = 30,
is_unbalance = F)
#- Cross Validation
set.seed(2020)
lgb.model.cv = lgb.cv(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = 0.02,                    #- *** 훈련량
num_leaves            = 25,                      #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                       #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,
early_stopping_rounds = 50,                      #- ** 더이상 발전이 없으면 그만두게 설정할때 이를 몇번동안 발전이 없으면 그만두게 할지 여부
eval_freq             = 20,
#eval                  = lgb.normalizedgini,
categorical_feature   = categoricals.vec,
nfold                 = 10,
stratified            = TRUE)
lgb.grid
best.iter = lgb.model.cv$best_iter
best.iter
lgb_model_1 = lgb.train(
params              = lgb.grid,
data                = train.lgb,
learning_rate       = 0.02,                        #- *** 훈련량
num_leaves          = 25,                          #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads         = 2,                           #- * 병렬처리시 처리할 쓰레드
nrounds             = best.iter,                   #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
#-     early_stopping이 있으면 최대한 많이 줘도 (10,000~)별 상관이 없음
eval_freq           = 20,
# eval                = lgb.normalizedgini)
categorical_feature = categoricals.vec)
#- Create and Submit Predictions
YHat_lgbm_1       <- predict(lgb_model_1, test_sparse)
AUC_lgbm <- mkAUCValue(
YHat = YHat_lgbm_1,
Y    = ifelse(testData$voted == 2, 1, 0))
AUC_lgbm
#- Cross Validation
set.seed(2020)
lgb.model.cv = lgb.cv(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = 0.02,                    #- *** 훈련량
num_leaves            = 25,                      #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                       #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,
early_stopping_rounds = 50,                      #- ** 더이상 발전이 없으면 그만두게 설정할때 이를 몇번동안 발전이 없으면 그만두게 할지 여부
eval_freq             = 20,
#eval                  = lgb.normalizedgini,
categorical_feature   = categoricals.vec,
nfold                 = 10,
stratified            = TRUE)
best.iter = lgb.model.cv$best_iter
lgb_model_1 = lgb.train(
params              = lgb.grid,
data                = train.lgb,
learning_rate       = 0.02,                        #- *** 훈련량
num_leaves          = 25,                          #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads         = 2,                           #- * 병렬처리시 처리할 쓰레드
nrounds             = best.iter,                   #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
#-     early_stopping이 있으면 최대한 많이 줘도 (10,000~)별 상관이 없음
eval_freq           = 20,
# eval                = lgb.normalizedgini)
categorical_feature = categoricals.vec)
lgb_model_1
best.iter
lgb_model_1 = lgb.train(
params              = lgb.grid,
data                = train.lgb,
learning_rate       = 0.02,                        #- *** 훈련량
num_leaves          = 25,                          #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads         = 2,                           #- * 병렬처리시 처리할 쓰레드
nrounds             = best.iter,                   #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
#-     early_stopping이 있으면 최대한 많이 줘도 (10,000~)별 상관이 없음
eval_freq           = 20,
# eval                = lgb.normalizedgini)
categorical_feature = categoricals.vec)
#- Create and Submit Predictions
YHat_lgbm_1       <- predict(lgb_model_1, test_sparse)
AUC_lgbm <- mkAUCValue(
YHat = YHat_lgbm_1,
Y    = ifelse(testData$voted == 2, 1, 0))
AUC_lgbm
library(DMwR);library(dplyr);library(data.table);library(caret);library(catboost);library(Matrix);library(ROCR);library(lightgbm)
setwd("C:/r/Monthly-Dacon-8th/")
source('C:/r/Monthly-Dacon-8th/monthlyDacon_8_common.R')
##################
## Data Loading ##
##################
sample_submission <- data.table::fread(
"sample_submission.csv",
stringsAsFactors = F,
data.table       = F
)
train <- data.table::fread(
"train.csv",
stringsAsFactors = F,
data.table = F,
na.strings = c("NA", "NaN", "NULL", "\\N"))
test  <- data.table::fread(
"test_x.csv",
stringsAsFactors = F,
data.table = F,
na.strings = c("NA", "NaN", "NULL", "\\N"))
revVar  <- c("QaA", "QdA", "QeA", "QfA", "QgA", "QiA", "QkA", "QnA", "QqA", "QrA")
train[revVar] <- train %>% select(revVar) %>% mutate_all(list(~6 - .))
test[revVar]  <- test %>% select(revVar) %>% mutate_all(list(~6 - .))
#- 2. machia score = 전체 점수의 평균 값 계산
machiaVar             <- train %>% select(matches("Q.A")) %>%  colnames
train$machiaScore     <- train %>% select(machiaVar) %>% transmute(machiaScore = rowMeans(across(where(is.numeric)))) %>% unlist %>% as.numeric
test$machiaScore      <- test  %>% select(machiaVar) %>% transmute(machiaScore = rowMeans(across(where(is.numeric)))) %>% unlist %>% as.numeric
#- 3 wf_mean, wr_mean, voca_mean(실제 단어를 아는 경우(wr)  - 허구인 단어를 아는 경우(wf) / 13)
wfVar <- train %>% select(matches("wf.")) %>%  colnames
wrVar <- train %>% select(matches("wr.")) %>%  colnames
#- 3.1 wf_mean
train$wf_mean <- train %>% select(wfVar) %>% transmute(wf_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
test$wf_mean  <- test %>% select(wfVar)  %>% transmute(wf_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
#- 3.2 wr_mean
train$wr_mean <- train %>% select(wrVar) %>% transmute(wr_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
test$wr_mean  <- test %>% select(wrVar)  %>% transmute(wr_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
#- 3.3 voca_mean
train$voca_mean <- train %>% transmute(voca_mean = round((wr_01 + wr_02 + wr_03 + wr_04 + wr_05 + wr_06 + wr_07 + wr_08 + wr_09 + wr_10 + wr_11 + wr_12 + wr_13 - wf_01 - wf_02 - wf_03 / 16), 8)) %>% unlist %>% as.numeric
test$voca_mean <- test %>% transmute(voca_mean = round((wr_01 + wr_02 + wr_03 + wr_04 + wr_05 + wr_06 + wr_07 + wr_08 + wr_09 + wr_10 + wr_11 + wr_12 + wr_13 - wf_01 - wf_02 - wf_03 / 16), 8)) %>% unlist %>% as.numeric
#- tp variable
tpPs <- c("tp01", "tp03", "tp05", "tp07", "tp09")
tpNg <- c("tp02", "tp04", "tp06", "tp08", "tp10")
#- 3.4 tp_positive
train$tp_positive  <- train %>% select(all_of(tpPs)) %>% transmute(tp_positive = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
test$tp_positive   <- test  %>% dplyr::select(all_of(tpPs)) %>% transmute(tp_positive = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
#- 3.5 tp_negative
train$tp_negative  <- train %>% dplyr::select(all_of(tpNg)) %>% transmute(tp_negative = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
test$tp_negative   <- test  %>% dplyr::select(all_of(tpNg)) %>% transmute(tp_negative = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
#- 3.6 tp_variance
train$tp_var       <- train %>% dplyr::select(c(tpPs, tpNg)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
test$tp_var        <- test %>% dplyr::select(c(tpPs, tpNg)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
#- 3.7 tp_mean
train$tp_mean <- train %>% transmute(tp_mean = round(((tp01 + tp03 + tp05 + tp07 + tp09 + (7 - tp02) + (7 - tp04) + (7 - tp06) + (7 - tp08) + (7 - tp10)) / 10), 8)) %>%  unlist %>% as.numeric
test$tp_mean  <- test %>% transmute(tp_mean = round(((tp01 + tp03 + tp05 + tp07 + tp09 + (7 - tp02) + (7 - tp04) + (7 - tp06) + (7 - tp08) + (7 - tp10)) / 10), 8)) %>%  unlist %>% as.numeric
factor_var <- c("engnat",
"age_group",
"education",
"gender",
"hand",
"married",
"race",
"religion",
"urban",
"voted")
train[factor_var]        <- train %>% dplyr::select(all_of(factor_var))        %>% mutate_all(as.factor)
test[factor_var[c(-10)]]  <-  test %>% dplyr::select(all_of(factor_var[c(-10)])) %>% mutate_all(as.factor)
#- 범주형(순서형) 변환
ordered_var1 <- colnames(train)[grep("Q.A", colnames(train))]
ordered_var2 <- c("tp01","tp02","tp03","tp04","tp05","tp06","tp07" ,"tp08", "tp09" ,"tp10",
"wf_01" , "wf_02" , "wf_03", "wr_01", "wr_02", "wr_03",  "wr_04", "wr_05",
"wr_06" , "wr_07", "wr_08","wr_09", "wr_10",  "wr_11", "wr_12" ,"wr_13")
train[c(ordered_var1, ordered_var2)]   <- train %>% dplyr::select(all_of(ordered_var1), all_of(ordered_var2)) %>% mutate_all(as.ordered)
test[c(ordered_var1, ordered_var2) ]   <- test %>% dplyr::select(all_of(ordered_var1), all_of(ordered_var2)) %>% mutate_all(as.ordered)
remv_var <- c("index")
train    <- train %>%  dplyr::select(-all_of(remv_var))
test     <- test  %>%  dplyr::select(-all_of(remv_var))
trainData <- train
testData  <- test
rm(ls = train)
rm(ls = test)
trainData_cat <- trainData
testData_cat  <- testData
YIdx       <- which(colnames(trainData_cat) %in% c('voted'))
features   <- trainData_cat[-YIdx]
labels     <- ifelse(trainData_cat[,YIdx] == 1, 0, 1)
train_pool <- catboost.load_pool(data = features, label = labels)
set.seed(1)
model_1 <- catboost.train(
train_pool,                                  #- 학습에 사용하고자 하는 train_pool
NULL,                                        #-
params = list(loss_function = 'Logloss',     #- loss function 지정(여기서는 분류모형이므로 Logloss)
random_seed   = 123,           #- seed number
custom_loss   = "AUC",         #- 모델링 할 때 추가로 추출할 값들 (train_dir로 지정한 곳으로 해당 결과를 파일로 내보내준다)
train_dir     = "./model/CatBoost_R_output", #- 모델링 한 결과를 저장할 directory
iterations    = 1000,                         #- 학습 iteration 수
metric_period = 10)
)
model_2 <- catboost.train(
train_pool,                                  #- 학습에 사용하고자 하는 train_pool
NULL,                                        #-
params = list(loss_function = 'Logloss',     #- loss function 지정(여기서는 분류모형이므로 Logloss)
random_seed   = 1,             #- seed number
custom_loss   = "AUC",         #- 모델링 할 때 추가로 추출할 값들 (train_dir로 지정한 곳으로 해당 결과를 파일로 내보내준다)
train_dir     = "./model/CatBoost_R_output", #- 모델링 한 결과를 저장할 directory
iterations    = 1000,                         #- 학습 iteration 수
metric_period = 10)
)
model_3 <- catboost.train(
train_pool,                                  #- 학습에 사용하고자 하는 train_pool
NULL,                                        #-
params = list(loss_function = 'Logloss',     #- loss function 지정(여기서는 분류모형이므로 Logloss)
random_seed   = 2020,          #- seed number
custom_loss   = "AUC",         #- 모델링 할 때 추가로 추출할 값들 (train_dir로 지정한 곳으로 해당 결과를 파일로 내보내준다)
train_dir     = "./model/CatBoost_R_output", #- 모델링 한 결과를 저장할 directory
iterations    = 1000,                         #- 학습 iteration 수
metric_period = 10)
)
model_3
model_2
# 3. catboost.predict function
real_pool    <- catboost.load_pool(testData_cat)
YHat_cat_1   <- catboost.predict(
model_1,
real_pool,
prediction_type = c('Probability'))  # Probability, Class
YHat_cat_2   <- catboost.predict(
model_2,
real_pool,
prediction_type = c('Probability'))  # Probability, Class
YHat_cat_3   <- catboost.predict(
model_3,
real_pool,
prediction_type = c('Probability'))  # Probability, Class
library(DMwR);library(dplyr);library(data.table);library(caret);library(catboost);library(Matrix);library(ROCR);library(lightgbm)
setwd("C:/r/Monthly-Dacon-8th/")
source('C:/r/Monthly-Dacon-8th/monthlyDacon_8_common.R')
##################
## Data Loading ##
##################
sample_submission <- data.table::fread(
"sample_submission.csv",
stringsAsFactors = F,
data.table       = F
)
train <- data.table::fread(
"train.csv",
stringsAsFactors = F,
data.table = F,
na.strings = c("NA", "NaN", "NULL", "\\N"))
test  <- data.table::fread(
"test_x.csv",
stringsAsFactors = F,
data.table = F,
na.strings = c("NA", "NaN", "NULL", "\\N"))
revVar  <- c("QaA", "QdA", "QeA", "QfA", "QgA", "QiA", "QkA", "QnA", "QqA", "QrA")
train[revVar] <- train %>% select(revVar) %>% mutate_all(list(~6 - .))
test[revVar]  <- test %>% select(revVar) %>% mutate_all(list(~6 - .))
#- 2. machia score = 전체 점수의 평균 값 계산
machiaVar             <- train %>% select(matches("Q.A")) %>%  colnames
train$machiaScore     <- train %>% select(machiaVar) %>% transmute(machiaScore = rowMeans(across(where(is.numeric)))) %>% unlist %>% as.numeric
test$machiaScore      <- test  %>% select(machiaVar) %>% transmute(machiaScore = rowMeans(across(where(is.numeric)))) %>% unlist %>% as.numeric
#- 3 wf_mean, wr_mean, voca_mean(실제 단어를 아는 경우(wr)  - 허구인 단어를 아는 경우(wf) / 13)
wfVar <- train %>% select(matches("wf.")) %>%  colnames
wrVar <- train %>% select(matches("wr.")) %>%  colnames
#- 3.1 wf_mean
train$wf_mean <- train %>% select(wfVar) %>% transmute(wf_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
test$wf_mean  <- test %>% select(wfVar)  %>% transmute(wf_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
#- 3.2 wr_mean
train$wr_mean <- train %>% select(wrVar) %>% transmute(wr_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
test$wr_mean  <- test %>% select(wrVar)  %>% transmute(wr_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
#- 3.3 voca_mean
train$voca_mean <- train %>% transmute(voca_mean = round((wr_01 + wr_02 + wr_03 + wr_04 + wr_05 + wr_06 + wr_07 + wr_08 + wr_09 + wr_10 + wr_11 + wr_12 + wr_13 - wf_01 - wf_02 - wf_03 / 16), 8)) %>% unlist %>% as.numeric
test$voca_mean <- test %>% transmute(voca_mean = round((wr_01 + wr_02 + wr_03 + wr_04 + wr_05 + wr_06 + wr_07 + wr_08 + wr_09 + wr_10 + wr_11 + wr_12 + wr_13 - wf_01 - wf_02 - wf_03 / 16), 8)) %>% unlist %>% as.numeric
#- tp variable
tpPs <- c("tp01", "tp03", "tp05", "tp07", "tp09")
tpNg <- c("tp02", "tp04", "tp06", "tp08", "tp10")
#- 3.4 tp_positive
train$tp_positive  <- train %>% select(all_of(tpPs)) %>% transmute(tp_positive = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
test$tp_positive   <- test  %>% dplyr::select(all_of(tpPs)) %>% transmute(tp_positive = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
#- 3.5 tp_negative
train$tp_negative  <- train %>% dplyr::select(all_of(tpNg)) %>% transmute(tp_negative = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
test$tp_negative   <- test  %>% dplyr::select(all_of(tpNg)) %>% transmute(tp_negative = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
#- 3.6 tp_variance
train$tp_var       <- train %>% dplyr::select(c(tpPs, tpNg)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
test$tp_var        <- test %>% dplyr::select(c(tpPs, tpNg)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
#- 3.7 tp_mean
train$tp_mean <- train %>% transmute(tp_mean = round(((tp01 + tp03 + tp05 + tp07 + tp09 + (7 - tp02) + (7 - tp04) + (7 - tp06) + (7 - tp08) + (7 - tp10)) / 10), 8)) %>%  unlist %>% as.numeric
test$tp_mean  <- test %>% transmute(tp_mean = round(((tp01 + tp03 + tp05 + tp07 + tp09 + (7 - tp02) + (7 - tp04) + (7 - tp06) + (7 - tp08) + (7 - tp10)) / 10), 8)) %>%  unlist %>% as.numeric
#- 범주형(명목형) 변환
factor_var <- c("engnat",
"age_group",
"education",
"gender",
"hand",
"married",
"race",
"religion",
"urban",
"voted")
train[factor_var]        <- train %>% dplyr::select(all_of(factor_var))        %>% mutate_all(as.factor)
test[factor_var[c(-10)]]  <-  test %>% dplyr::select(all_of(factor_var[c(-10)])) %>% mutate_all(as.factor)
ordered_var1 <- colnames(train)[grep("Q.A", colnames(train))]
ordered_var2 <- c("tp01","tp02","tp03","tp04","tp05","tp06","tp07" ,"tp08", "tp09" ,"tp10",
"wf_01" , "wf_02" , "wf_03", "wr_01", "wr_02", "wr_03",  "wr_04", "wr_05",
"wr_06" , "wr_07", "wr_08","wr_09", "wr_10",  "wr_11", "wr_12" ,"wr_13")
remv_var <- c("index")
train    <- train %>%  dplyr::select(-all_of(remv_var))
test     <- test  %>%  dplyr::select(-all_of(remv_var))
factor_var[-10]
oneHotVar       <- c(factor_var[-10])
train_fac       <- train %>% dplyr::select(all_of(oneHotVar))
dmy_model       <- caret::dummyVars("~ .", data = train_fac)
train_oneHot    <- data.frame(predict(dmy_model, train_fac))
train  <- train %>% dplyr::select(-oneHotVar)
train  <- dplyr::bind_cols(train, train_oneHot)
test_fac       <- test %>% dplyr::select(all_of(oneHotVar[c(-10)]))
dmy_model      <- caret::dummyVars("~ .", data = test_fac)
test_oneHot    <- data.frame(predict(dmy_model, test_fac))
test  <- test %>% dplyr::select(-oneHotVar)
test  <- dplyr::bind_cols(test, test_oneHot)
rm(ls = test_oneHot)
rm(ls = train_oneHot)
rm(ls = train_fac)
rm(ls = test_fac)
trainData <- train
testData  <- test
rm(ls = train)
rm(ls = test)
varnames     = setdiff(colnames(trainData), c("voted"))
train_sparse = Matrix(as.matrix(trainData[, varnames]), sparse=TRUE)
test_sparse  = Matrix(as.matrix(testData[,  varnames]), sparse=TRUE)
y_train = trainData[, c("voted")]
# binary, auc 계산시, 반드시 Y 값은 0 또는 1이어야 함
train.lgb <- lgb.Dataset(data  = train_sparse, label = ifelse(y_train == 2, 1, 0))
test.lgb  <- lgb.Dataset(data  = test_sparse)
categoricals.vec <- c(ordered_var1, ordered_var2)
lgb.grid = list(objective = "binary",
metric    = "auc",
boosting  = "gbdt",
min_sum_hessian_in_leaf = 1,
feature_fraction = 0.7,
bagging_fraction = 0.7,
bagging_freq = 5,
# max_depth    = 5,
# num_leaves   = 5,
# min_child_weight = 1,
#min_data = 100,
#max_bin = 50,
lambda_l1 = 8,
lambda_l2 = 1.3,
#min_data_in_bin=100,
#min_gain_to_split = 10,
#min_data_in_leaf = 30,
is_unbalance = F)
#- Cross Validation
set.seed(1)
lgb.model.cv = lgb.cv(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = 0.02,                    #- *** 훈련량
num_leaves            = 25,                      #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                       #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,
early_stopping_rounds = 50,                      #- ** 더이상 발전이 없으면 그만두게 설정할때 이를 몇번동안 발전이 없으면 그만두게 할지 여부
eval_freq             = 20,
#eval                  = lgb.normalizedgini,
categorical_feature   = categoricals.vec,
nfold                 = 10,
stratified            = TRUE)
best.iter = lgb.model.cv$best_iter
best.iter
best.iter
lgb_model_1 = lgb.train(
params              = lgb.grid,
data                = train.lgb,
learning_rate       = 0.02,                        #- *** 훈련량
num_leaves          = 25,                          #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads         = 2,                           #- * 병렬처리시 처리할 쓰레드
nrounds             = best.iter,                   #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
#-     early_stopping이 있으면 최대한 많이 줘도 (10,000~)별 상관이 없음
eval_freq           = 20,
# eval                = lgb.normalizedgini)
categorical_feature = categoricals.vec)
#- Cross Validation
set.seed(123)
lgb.model.cv = lgb.cv(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = 0.02,                    #- *** 훈련량
num_leaves            = 25,                      #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                       #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,
early_stopping_rounds = 50,                      #- ** 더이상 발전이 없으면 그만두게 설정할때 이를 몇번동안 발전이 없으면 그만두게 할지 여부
eval_freq             = 20,
#eval                  = lgb.normalizedgini,
categorical_feature   = categoricals.vec,
nfold                 = 10,
stratified            = TRUE)
best.iter = lgb.model.cv$best_iter
best.iter
lgb_model_2 = lgb.train(
params              = lgb.grid,
data                = train.lgb,
learning_rate       = 0.02,                        #- *** 훈련량
num_leaves          = 25,                          #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads         = 2,                           #- * 병렬처리시 처리할 쓰레드
nrounds             = best.iter,                   #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
#-     early_stopping이 있으면 최대한 많이 줘도 (10,000~)별 상관이 없음
eval_freq           = 20,
# eval                = lgb.normalizedgini)
categorical_feature = categoricals.vec)
#- Cross Validation
set.seed(2020)
lgb.model.cv = lgb.cv(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = 0.02,                    #- *** 훈련량
num_leaves            = 25,                      #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                       #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,
early_stopping_rounds = 50,                      #- ** 더이상 발전이 없으면 그만두게 설정할때 이를 몇번동안 발전이 없으면 그만두게 할지 여부
eval_freq             = 20,
#eval                  = lgb.normalizedgini,
categorical_feature   = categoricals.vec,
nfold                 = 10,
stratified            = TRUE)
best.iter = lgb.model.cv$best_iter
lgb_model_3 = lgb.train(
params              = lgb.grid,
data                = train.lgb,
learning_rate       = 0.02,                        #- *** 훈련량
num_leaves          = 25,                          #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads         = 2,                           #- * 병렬처리시 처리할 쓰레드
nrounds             = best.iter,                   #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
#-     early_stopping이 있으면 최대한 많이 줘도 (10,000~)별 상관이 없음
eval_freq           = 20,
# eval                = lgb.normalizedgini)
categorical_feature = categoricals.vec)
#- Create and Submit Predictions
YHat_lgbm_1       <- predict(lgb_model_1, test_sparse)
YHat_lgbm_2       <- predict(lgb_model_2, test_sparse)
YHat_lgbm_3       <- predict(lgb_model_3, test_sparse)
YHat_lgbm_3
YHat_lgbm_2       <- predict(lgb_model_2, test_sparse)
YHat_lgbm_2
#- Create and Submit Predictions
YHat_lgbm_1       <- predict(lgb_model_1, test_sparse)
YHat_lgbm_1
((YHat_cat_1 + YHat_cat_2 + YHat_cat_3) / 3)
(((YHat_cat_1 + YHat_cat_2 + YHat_cat_3) / 3)* 0.6) + (((YHat_lgbm_1 + YHat_lgbm_2 + YHat_lgbm_3) / 3) * 0.4)
(((YHat_lgbm_1 + YHat_lgbm_2 + YHat_lgbm_3) / 3)
((YHat_lgbm_1 + YHat_lgbm_2 + YHat_lgbm_3) / 3)
((YHat_cat_1 + YHat_cat_2 + YHat_cat_3) / 3)
sample_submission$voted <- (((YHat_cat_1 + YHat_cat_2 + YHat_cat_3) / 3)* 0.6) + (((YHat_lgbm_1 + YHat_lgbm_2 + YHat_lgbm_3) / 3) * 0.4)
write.csv(sample_submission, "submission_data.csv", row.names = F)
((YHat_cat_1 + YHat_cat_2 + YHat_cat_3) / 3)
sample_submission$voted <- ((YHat_cat_1 + YHat_cat_2 + YHat_cat_3) / 3)
write.csv(sample_submission, "submission_data.csv", row.names = F)
library(DMwR);library(dplyr);library(data.table);library(caret);library(catboost);library(Matrix);library(ROCR);library(lightgbm)
setwd("C:/r/Monthly-Dacon-8th/")
source('C:/r/Monthly-Dacon-8th/monthlyDacon_8_common.R')
train <- data.table::fread(
"train.csv",
stringsAsFactors = F,
data.table = F,
na.strings = c("NA", "NaN", "NULL", "\\N"))
train
summary(train)
