categoricals.vec <- c(factor_var[-10], ordered_var1, ordered_var2)
g <- grid[i, ]
learningRate <- g$learningRate
maxDepth     <- g$maxDepth
booster      <- g$booster
lgb_model = lgb.train(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = learningRate,             #- *** 훈련량
boosting              = booster,                  #- "gbdt", "rf", "dart" or "goss".
num_leaves            = 15,                       #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                        #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,                #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
valids                = valids,
early_stopping_rounds = 50,
categorical_feature   = categoricals.vec,
eval_freq             = 50,
verbose               = 1)
set.seed(1)
categoricals.vec
train.lgb
g <- grid[i, ]
learningRate <- g$learningRate
maxDepth     <- g$maxDepth
booster      <- g$booster
booster
## grid search
## 1. 훈련량 0.01, 0.02 0.05, 0.07, 0.1
## 2. 반복량 7000
## 3. 나무 깊이 3,4,5,6,7
## 4. 부스팅 방법 gbdt, dart
grid <- expand.grid(
learningRate = c(0.01, 0.02, 0.05, 0.07, 0.1),
maxDepth     = c(5, 6, 7),
booster      = c('gbdt','dart')
)
i <- 1
g <- grid[i, ]
learningRate <- g$learningRate
booster      <- g$booster
maxDepth     <- g$maxDepth
set.seed(1)
lgb_model = lgb.train(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = learningRate,             #- *** 훈련량
boosting              = booster,                  #- "gbdt", "rf", "dart" or "goss".
num_leaves            = 15,                       #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                        #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,                #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
valids                = valids,
early_stopping_rounds = 50,
categorical_feature   = categoricals.vec,
eval_freq             = 50,
verbose               = 1)
bestScore <- lgb_model$best_score
bestIter  <- lgb_model$best_iter
bestScore
####################
## final assemble ##
####################
AUC_final <- mkAUCValue(
YHat = (YHat_cat * 0.6 + YHat_lgbm * 0.4),
Y    = ifelse(testData$voted == 2, 1, 0))
AUC_final
library(DMwR);library(dplyr);library(data.table);library(caret);library(catboost);library(Matrix);library(ROCR);library(lightgbm)
setwd("C:/r/Monthly-Dacon-8th/")
source('C:/r/Monthly-Dacon-8th/monthlyDacon_8_common.R')
##################
## Data Loading ##
##################
sample_submission <- data.table::fread(
"sample_submission.csv",
stringsAsFactors = F,
data.table       = F
)
train <- data.table::fread(
"train.csv",
stringsAsFactors = F,
data.table = F,
na.strings = c("NA", "NaN", "NULL", "\\N"))
test  <- data.table::fread(
"test_x.csv",
stringsAsFactors = F,
data.table = F,
na.strings = c("NA", "NaN", "NULL", "\\N"))
revVar  <- c("QaA", "QdA", "QeA", "QfA", "QgA", "QiA", "QkA", "QnA", "QqA", "QrA")
train[revVar] <- train %>% select(revVar) %>% mutate_all(list(~6 - .))
test[revVar]  <- test %>% select(revVar) %>% mutate_all(list(~6 - .))
# QAvar <- train %>% select(matches("Q.A")) %>%  colnames
# train$QA_var <- train %>% dplyr::select(c(QAvar)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
# test$QA_var  <-  test %>% dplyr::select(c(QAvar)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
#- 2. machia score = 전체 점수의 평균 값 계산
machiaVar             <- train %>% select(matches("Q.A")) %>%  colnames
train$machiaScore     <- train %>% select(machiaVar) %>% transmute(machiaScore = rowMeans(across(where(is.numeric)))) %>% unlist %>% as.numeric
test$machiaScore      <- test  %>% select(machiaVar) %>% transmute(machiaScore = rowMeans(across(where(is.numeric)))) %>% unlist %>% as.numeric
#- 3 wf_mean, wr_mean, voca_mean(실제 단어를 아는 경우(wr)  - 허구인 단어를 아는 경우(wf) / 13)
wfVar <- train %>% select(matches("wf.")) %>%  colnames
wrVar <- train %>% select(matches("wr.")) %>%  colnames
#- 3.1 wf_mean
# train$wf_mean <- train %>% select(wfVar) %>% transmute(wf_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
# test$wf_mean  <- test %>% select(wfVar)  %>% transmute(wf_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
#- 3.2 wr_mean
# train$wr_mean <- train %>% select(wrVar) %>% transmute(wr_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
# test$wr_mean  <- test %>% select(wrVar)  %>% transmute(wr_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
#- 3.3 voca_mean
train$voca_mean <- train %>% transmute(voca_mean = round((wr_01 + wr_02 + wr_03 + wr_04 + wr_05 + wr_06 + wr_07 + wr_08 + wr_09 + wr_10 + wr_11 + wr_12 + wr_13 - wf_01 - wf_02 - wf_03 / 16), 8)) %>% unlist %>% as.numeric
test$voca_mean <- test %>% transmute(voca_mean = round((wr_01 + wr_02 + wr_03 + wr_04 + wr_05 + wr_06 + wr_07 + wr_08 + wr_09 + wr_10 + wr_11 + wr_12 + wr_13 - wf_01 - wf_02 - wf_03 / 16), 8)) %>% unlist %>% as.numeric
#- tp variable
tpPs <- c("tp01", "tp03", "tp05", "tp07", "tp09")
tpNg <- c("tp02", "tp04", "tp06", "tp08", "tp10")
#- 3.4 tp_positive
train$tp_positive  <- train %>% select(all_of(tpPs)) %>% transmute(tp_positive = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
test$tp_positive   <- test  %>% dplyr::select(all_of(tpPs)) %>% transmute(tp_positive = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
#- 3.5 tp_negative
train$tp_negative  <- train %>% dplyr::select(all_of(tpNg)) %>% transmute(tp_negative = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
test$tp_negative   <- test  %>% dplyr::select(all_of(tpNg)) %>% transmute(tp_negative = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
#- 3.6 tp_variance
train$tp_var       <- train %>% dplyr::select(c(tpPs, tpNg)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
test$tp_var        <- test %>% dplyr::select(c(tpPs, tpNg)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
#- 3.7 tp_mean
train$tp_mean <- train %>% transmute(tp_mean = round(((tp01 + tp03 + tp05 + tp07 + tp09 + (7 - tp02) + (7 - tp04) + (7 - tp06) + (7 - tp08) + (7 - tp10)) / 10), 8)) %>%  unlist %>% as.numeric
test$tp_mean  <- test %>% transmute(tp_mean = round(((tp01 + tp03 + tp05 + tp07 + tp09 + (7 - tp02) + (7 - tp04) + (7 - tp06) + (7 - tp08) + (7 - tp10)) / 10), 8)) %>%  unlist %>% as.numeric
#- 4. final Var
finalVar <- c("education","age_group","race","religion","QqE", "engnat","married","QsE","QrE","QbE","QjE","QhE","QcE","QpE","QtE","QiE","QoE","QlE","QeE","QkE","QmE","QfE","QaE","tp_var","QgE","tp03","QnE","tp06",  "QdE","tp_positive", "tp_mean",  "tp05",  "machiaScore", "tp02"  ,"voca_mean","QqA","familysize","QpA","QgA" , "tp07","urban","tp09" , "QsA","QmA","QbA","tp08","QtA","tp_negative","QdA","QfA","tp04","QeA",
"QiA","tp01","tp10",  "wr_06", "QaA","QoA","QjA","wr_02", "QcA","wf_02", "wf_01" ,"wr_11", "gender",
"QkA","QrA" ,"hand","QlA","QnA")
#- 범주형(명목형) 변환
factor_var <- c("engnat",
"age_group",
"education",
"gender",
"hand",
"married",
"race",
"religion",
"urban",
"voted")
train[factor_var]        <- train %>% dplyr::select(all_of(factor_var))        %>% mutate_all(as.factor)
test[factor_var[c(-10)]]  <-  test %>% dplyr::select(all_of(factor_var[c(-10)])) %>% mutate_all(as.factor)
#- 범주형(순서형) 변환
ordered_var1 <- colnames(train)[grep("Q.A", colnames(train))]
ordered_var2 <- colnames(train)[grep("tp|wr|wf.", colnames(train))]
train[c(ordered_var1, ordered_var2)]   <- train %>% dplyr::select(all_of(ordered_var1), all_of(ordered_var2)) %>% mutate_all(as.ordered)
test[c(ordered_var1, ordered_var2) ]   <- test %>% dplyr::select(all_of(ordered_var1), all_of(ordered_var2)) %>% mutate_all(as.ordered)
remv_var <- c("index")
train    <- train %>%  dplyr::select(-all_of(remv_var))
test     <- test  %>%  dplyr::select(-all_of(remv_var))
trainData <- train[c(finalVar, "voted")]
testData  <- test[finalVar]
# voted  1 --> 0, 2 --> 1로 변경
trainData_cat <- trainData
testData_cat  <- testData
YIdx       <- which(colnames(trainData_cat) %in% c('voted'))
features   <- trainData_cat[-YIdx]
labels     <- ifelse(trainData_cat[,YIdx] == 1, 0, 1)
train_pool <- catboost.load_pool(data = features, label = labels)
# 2. catboost.train 함수를 이용하여 train
set.seed(1)
model <- catboost.train(
train_pool,                                  #- 학습에 사용하고자 하는 train_pool
NULL,                                        #-
params = list(loss_function = 'Logloss',     #- loss function 지정(여기서는 분류모형이므로 Logloss)
random_seed   = 123,           #- seed number
custom_loss   = "AUC",         #- 모델링 할 때 추가로 추출할 값들 (train_dir로 지정한 곳으로 해당 결과를 파일로 내보내준다)
train_dir     = "./model/CatBoost_R_output", #- 모델링 한 결과를 저장할 directory
iterations    = 1000,                         #- 학습 iteration 수
metric_period = 10)
)
save(model, file = "catboost_version24")
save(model, file = "catboost_version24.RData")
real_pool  <- catboost.load_pool(testData_cat)
YHat_cat   <- catboost.predict(
model,
real_pool,
prediction_type = c('Probability'))  # Probability, Class
YHat_cat
library(DMwR);library(dplyr);library(data.table);library(caret);library(catboost);library(Matrix);library(ROCR);library(lightgbm);library(CatEncoders);library(foreach)
setwd("C:/r/Monthly-Dacon-8th/")
source('C:/r/Monthly-Dacon-8th/monthlyDacon_8_common.R')
##################
## Data Loading ##
##################
sample_submission <- data.table::fread(
"sample_submission.csv",
stringsAsFactors = F,
data.table       = F
)
train <- data.table::fread(
"train.csv",
stringsAsFactors = F,
data.table = F,
na.strings = c("NA", "NaN", "NULL", "\\N"))
test  <- data.table::fread(
"test_x.csv",
stringsAsFactors = F,
data.table = F,
na.strings = c("NA", "NaN", "NULL", "\\N"))
revVar  <- c("QaA", "QdA", "QeA", "QfA", "QgA", "QiA", "QkA", "QnA", "QqA", "QrA")
train[revVar] <- train %>% select(revVar) %>% mutate_all(list(~6 - .))
test[revVar]  <- test %>% select(revVar) %>% mutate_all(list(~6 - .))
#- 2. machia score = 전체 점수의 평균 값 계산
machiaVar             <- train %>% select(matches("Q.A")) %>%  colnames
train$machiaScore     <- train %>% select(machiaVar) %>% transmute(machiaScore = rowMeans(across(where(is.numeric)))) %>% unlist %>% as.numeric
test$machiaScore      <- test  %>% select(machiaVar) %>% transmute(machiaScore = rowMeans(across(where(is.numeric)))) %>% unlist %>% as.numeric
# QAvar <- train %>% select(matches("Q.A")) %>%  colnames
# train$QA_var <- train %>% dplyr::select(c(QAvar)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
# test$QA_var  <-  test %>% dplyr::select(c(QAvar)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
#- 3 wf_mean, wr_mean, voca_mean(실제 단어를 아는 경우(wr)  - 허구인 단어를 아는 경우(wf) / 13)
wfVar <- train %>% select(matches("wf.")) %>%  colnames
wrVar <- train %>% select(matches("wr.")) %>%  colnames
#- 3.1 wf_mean
# train$wf_mean <- train %>% select(wfVar) %>% transmute(wf_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
# test$wf_mean  <- test %>% select(wfVar)  %>% transmute(wf_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
#- 3.2 wr_mean
# train$wr_mean <- train %>% select(wrVar) %>% transmute(wr_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
# test$wr_mean  <- test %>% select(wrVar)  %>% transmute(wr_mean = round(rowMeans(across(where(is.numeric))), 8)) %>% unlist %>% as.numeric
#- 3.3 voca_mean
train$voca_mean <- train %>% transmute(voca_mean = round((wr_01 + wr_02 + wr_03 + wr_04 + wr_05 + wr_06 + wr_07 + wr_08 + wr_09 + wr_10 + wr_11 + wr_12 + wr_13 - wf_01 - wf_02 - wf_03 / 16), 8)) %>% unlist %>% as.numeric
test$voca_mean <- test %>% transmute(voca_mean = round((wr_01 + wr_02 + wr_03 + wr_04 + wr_05 + wr_06 + wr_07 + wr_08 + wr_09 + wr_10 + wr_11 + wr_12 + wr_13 - wf_01 - wf_02 - wf_03 / 16), 8)) %>% unlist %>% as.numeric
#- tp variable
tpPs <- c("tp01", "tp03", "tp05", "tp07", "tp09")
tpNg <- c("tp02", "tp04", "tp06", "tp08", "tp10")
#- 3.4 tp_positive
train$tp_positive  <- train %>% select(all_of(tpPs)) %>% transmute(tp_positive = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
test$tp_positive   <- test  %>% dplyr::select(all_of(tpPs)) %>% transmute(tp_positive = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
#- 3.5 tp_negative
train$tp_negative  <- train %>% dplyr::select(all_of(tpNg)) %>% transmute(tp_negative = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
test$tp_negative   <- test  %>% dplyr::select(all_of(tpNg)) %>% transmute(tp_negative = round(rowMeans(across(where(is.numeric))), 8)) %>%  unlist %>% as.numeric
#- 3.6 tp_variance
train$tp_var       <- train %>% dplyr::select(c(tpPs, tpNg)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
test$tp_var        <- test %>% dplyr::select(c(tpPs, tpNg)) %>% transmute(test = round(RowVar(across(where(is.numeric))), 4)) %>%  unlist %>% as.numeric
#- 3.7 tp_mean
train$tp_mean <- train %>% transmute(tp_mean = round(((tp01 + tp03 + tp05 + tp07 + tp09 + (7 - tp02) + (7 - tp04) + (7 - tp06) + (7 - tp08) + (7 - tp10)) / 10), 8)) %>%  unlist %>% as.numeric
test$tp_mean  <- test %>% transmute(tp_mean = round(((tp01 + tp03 + tp05 + tp07 + tp09 + (7 - tp02) + (7 - tp04) + (7 - tp06) + (7 - tp08) + (7 - tp10)) / 10), 8)) %>%  unlist %>% as.numeric
#- 범주형(명목형) 변환
factor_var <- c("engnat",
"age_group",
"education",
"gender",
"hand",
"married",
"race",
"religion",
"urban",
"voted")
for(i in factor_var){
encode      <- CatEncoders::LabelEncoder.fit( train[,i])
train[,i]   <- CatEncoders::transform(encode, train[,i])
if(i  != 'voted'){
encode      <- CatEncoders::LabelEncoder.fit(test[,i])
test[,i]    <- CatEncoders::transform(encode, test[,i])
}
}
train[factor_var]        <- train %>% dplyr::select(all_of(factor_var))        %>% mutate_all(as.factor)
test[factor_var[c(-10)]]  <-  test %>% dplyr::select(all_of(factor_var[c(-10)])) %>% mutate_all(as.factor)
#- 범주형(순서형) 변환
ordered_var1 <- colnames(train)[grep("Q.A", colnames(train))]
ordered_var2 <- colnames(train)[grep("tp|wr|wf.", colnames(train))]
#-  변수 제거
remv_var <- c("index")
train    <- train %>%  dplyr::select(-all_of(remv_var))
test     <- test  %>%  dplyr::select(-all_of(remv_var))
## final 제출시, 적용
trainData <- train
testData  <- test
varnames     = setdiff(colnames(trainData), c("voted"))
train_sparse = Matrix(as.matrix(trainData[, varnames]), sparse=TRUE)
test_sparse  = Matrix(as.matrix(testData[,  varnames]), sparse=TRUE)
y_train      = trainData[, c("voted")]
# binary, auc 계산시, 반드시 Y 값은 0 또는 1이어야 함
train.lgb        <- lgb.Dataset(data  = train_sparse, label = ifelse(y_train == 2, 1, 0))
test.lgb         <- lgb.Dataset.create.valid(train.lgb, data = test_sparse, label = ifelse(testData[c('voted')] == 2, 1, 0))
valids           <- list(train = train.lgb, test = test.lgb)
categoricals.vec <- c(factor_var[-10], ordered_var1, ordered_var2)
i <- 1
g <- grid[i, ]
learningRate <- g$learningRate
maxDepth     <- g$maxDepth
booster      <- g$booster
set.seed(1)
lgb_model = lgb.train(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = learningRate,             #- *** 훈련량
boosting              = booster,                  #- "gbdt", "rf", "dart" or "goss".
num_leaves            = 15,                       #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                        #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,                #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
valids                = valids,
early_stopping_rounds = 50,
categorical_feature   = categoricals.vec,
eval_freq             = 50,
verbose               = 1)
bestScore <- lgb_model$best_score
bestIter  <- lgb_model$best_iter
bestIter
set.seed(1)
trainIdx <- createDataPartition(train[,"voted"], p = 0.7, list = F)
trainData <- train[ trainIdx, ]
testData  <- train[-trainIdx, ]
varnames     = setdiff(colnames(trainData), c("voted"))
train_sparse = Matrix(as.matrix(trainData[, varnames]), sparse=TRUE)
test_sparse  = Matrix(as.matrix(testData[,  varnames]), sparse=TRUE)
y_train      = trainData[, c("voted")]
# binary, auc 계산시, 반드시 Y 값은 0 또는 1이어야 함
train.lgb        <- lgb.Dataset(data  = train_sparse, label = ifelse(y_train == 2, 1, 0))
test.lgb         <- lgb.Dataset.create.valid(train.lgb, data = test_sparse, label = ifelse(testData[c('voted')] == 2, 1, 0))
valids           <- list(train = train.lgb, test = test.lgb)
categoricals.vec <- c(factor_var[-10], ordered_var1, ordered_var2)
i <- 1
g <- grid[i, ]
learningRate <- g$learningRate
maxDepth     <- g$maxDepth
booster      <- g$booster
set.seed(1)
lgb_model = lgb.train(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = learningRate,             #- *** 훈련량
boosting              = booster,                  #- "gbdt", "rf", "dart" or "goss".
num_leaves            = 15,                       #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                        #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,                #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
# valids                = valids,
# early_stopping_rounds = 50,
categorical_feature   = categoricals.vec,
eval_freq             = 50,
verbose               = 1)
learningRate
## grid search
## 1. 훈련량 0.01, 0.02 0.05, 0.07, 0.1
## 2. 반복량 7000
## 3. 나무 깊이 3,4,5,6,7
## 4. 부스팅 방법 gbdt, dart
grid <- expand.grid(
learningRate = c(0.01, 0.02, 0.05, 0.07, 0.1),
maxDepth     = c(5, 6, 7),
booster      = c('gbdt','dart')
)
i <- 1
g <- grid[i, ]
learningRate <- g$learningRate
maxDepth     <- g$maxDepth
booster      <- g$booster
lgb_model = lgb.train(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = learningRate,             #- *** 훈련량
boosting              = booster,                  #- "gbdt", "rf", "dart" or "goss".
num_leaves            = 15,                       #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                        #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,                #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
# valids                = valids,
# early_stopping_rounds = 50,
categorical_feature   = categoricals.vec,
eval_freq             = 50,
verbose               = 1)
set.seed(1)
lgb.grid = list(objective = "binary",
metric    = "auc",
min_sum_hessian_in_leaf = 1,
feature_fraction = 0.7,
bagging_fraction = 0.7,
bagging_freq = 5,
max_depth    = maxDepth,
#min_data = 100,
#max_bin = 50,
lambda_l1 = 8,
lambda_l2 = 1.3,
#min_data_in_bin=100,
#min_gain_to_split = 10,
#min_data_in_leaf = 30,
is_unbalance = F)
set.seed(1)
lgb_model = lgb.train(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = learningRate,             #- *** 훈련량
boosting              = booster,                  #- "gbdt", "rf", "dart" or "goss".
num_leaves            = 15,                       #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                        #- * 병렬처리시 처리할 쓰레드
nrounds               = 7000,                #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
valids                = valids,
early_stopping_rounds = 50,
categorical_feature   = categoricals.vec,
eval_freq             = 50,
verbose               = 1)
bestScore <- lgb_model$best_score
bestScore
bestIter  <- lgb_model$best_iter
bestIter
trainData <- train
testData  <- test
varnames     = setdiff(colnames(trainData), c("voted"))
train_sparse = Matrix(as.matrix(trainData[, varnames]), sparse=TRUE)
test_sparse  = Matrix(as.matrix(testData[,  varnames]), sparse=TRUE)
y_train      = trainData[, c("voted")]
# binary, auc 계산시, 반드시 Y 값은 0 또는 1이어야 함
train.lgb        <- lgb.Dataset(data  = train_sparse, label = ifelse(y_train == 2, 1, 0))
test.lgb         <- lgb.Dataset.create.valid(train.lgb, data = test_sparse, label = ifelse(testData[c('voted')] == 2, 1, 0))
valids           <- list(train = train.lgb, test = test.lgb)
categoricals.vec <- c(factor_var[-10], ordered_var1, ordered_var2)
i <- 1
g <- grid[i, ]
learningRate <- g$learningRate
maxDepth     <- g$maxDepth
booster      <- g$booster
lgb.grid = list(objective = "binary",
metric    = "auc",
min_sum_hessian_in_leaf = 1,
feature_fraction = 0.7,
bagging_fraction = 0.7,
bagging_freq = 5,
max_depth    = maxDepth,
#min_data = 100,
#max_bin = 50,
lambda_l1 = 8,
lambda_l2 = 1.3,
#min_data_in_bin=100,
#min_gain_to_split = 10,
#min_data_in_leaf = 30,
is_unbalance = F)
set.seed(1)
lgb_model = lgb.train(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = learningRate,             #- *** 훈련량
boosting              = booster,                  #- "gbdt", "rf", "dart" or "goss".
num_leaves            = 15,                       #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                        #- * 병렬처리시 처리할 쓰레드
nrounds               = 952,                #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
# valids                = valids,
# early_stopping_rounds = 50,
categorical_feature   = categoricals.vec,
eval_freq             = 50,
verbose               = 1)
bestIter  <- lgb_model$best_iter
bestIter
lgb_model
#- Create and Submit Predictions
YHat_lgbm <- predict(lgb_model, test_sparse)
YHat_lgbm
sample_submission$voted <- (YHat_cat * 0.6) + (YHat_lgbm * 0.4)
sample_submission$voted
write.csv(sample_submission, "submission_data.csv", row.names = F)
bestIter  <- lgb_model$best_iter
tree_imp1  <- lgb.importance(lgb_model, percentage = TRUE)
tree_imp1$Feature
finalVar <- tree_imp1$Feature[1:70]
finalVar
finalVar
trainData <- train[c(finalVar, "voted")]
testData  <- test[c(finalVar)]
# categoricals.vec <- categoricals.vec[!categoricals.vec %in% c('tp_var')]
categoricals.vec <- categoricals.vec[categoricals.vec %in% finalVar]
categoricals.vec
varnames     = setdiff(colnames(trainData), c("voted"))
train_sparse = Matrix(as.matrix(trainData[, varnames]), sparse=TRUE)
test_sparse  = Matrix(as.matrix(testData[,  varnames]), sparse=TRUE)
y_train      = trainData[, c("voted")]
# binary, auc 계산시, 반드시 Y 값은 0 또는 1이어야 함
train.lgb        <- lgb.Dataset(data  = train_sparse, label = ifelse(y_train == 2, 1, 0))
test.lgb         <- lgb.Dataset.create.valid(train.lgb, data = test_sparse, label = ifelse(testData[c('voted')] == 2, 1, 0))
valids           <- list(train = train.lgb, test = test.lgb)
categoricals.vec <- c(factor_var[-10], ordered_var1, ordered_var2)
# categoricals.vec <- categoricals.vec[!categoricals.vec %in% c('tp_var')]
categoricals.vec <- categoricals.vec[categoricals.vec %in% finalVar]
g <- grid[i, ]
learningRate <- g$learningRate
maxDepth     <- g$maxDepth
booster      <- g$booster
lgb.grid = list(objective = "binary",
metric    = "auc",
min_sum_hessian_in_leaf = 1,
feature_fraction = 0.7,
bagging_fraction = 0.7,
bagging_freq = 5,
max_depth    = maxDepth,
#min_data = 100,
#max_bin = 50,
lambda_l1 = 8,
lambda_l2 = 1.3,
#min_data_in_bin=100,
#min_gain_to_split = 10,
#min_data_in_leaf = 30,
is_unbalance = F)
set.seed(1)
lgb_model = lgb.train(
params                = lgb.grid,
data                  = train.lgb,
learning_rate         = learningRate,             #- *** 훈련량
boosting              = booster,                  #- "gbdt", "rf", "dart" or "goss".
num_leaves            = 15,                       #- * 트리가 가질수 있는 최대 잎사귀 수
num_threads           = 2,                        #- * 병렬처리시 처리할 쓰레드
nrounds               = 952,                #- *** 계속 나무를 반복하며 부스팅을 하는데 몇번을 할것인가이다. 1000이상정도는 해주도록 함
# valids                = valids,
# early_stopping_rounds = 50,
categorical_feature   = categoricals.vec,
eval_freq             = 50,
verbose               = 1)
bestIter  <- lgb_model$best_iter
bestIter
#- Create and Submit Predictions
YHat_lgbm <- predict(lgb_model, test_sparse)
YHat_lgbm
sample_submission$voted <- (YHat_cat * 0.6) + (YHat_lgbm * 0.4)
sample_submission$voted
write.csv(sample_submission, "submission_data.csv", row.names = F)
sample_submission$voted <- (YHat_cat)
sample_submission$voted
write.csv(sample_submission, "submission_data.csv", row.names = F)
